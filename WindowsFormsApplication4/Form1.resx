<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAGhoAAAEAGACwCAAAFgAAACgAAAAaAAAANAAAAAEAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAD79/b89/b/9PX/8fL/7u7/7u7/8PH/8/T/9vX/9fT/9vT/9vT/9fT/9fT/9fL/9vP/8/P/9fX/9/b/
        9vX/9PT/9vX/+/n//vz/+fb/+fYAAP/6+f/39//w8fzm6Pre3vjY2fnX2PvZ2vvZ2fjZ2PfZ2PbY1/fY
        1/jZ2PzZ1v/Z1/3X1/3Z2f3b2/nb2vTa2vPf3vnq6P/z8f/59v/59gAA//37//b0//Lxx6urmnV3pX1/
        qoCBp31+qoCBqICBp4F/pYJ/p4F/qIF/qoF/rIB/qHx9o3l6pX9/oH5+pIiIj3p5+Obl//Px//f0/vf0
        AAD/+/n/8vH/8/Pfvb7BmZvcrbDgr7HbqavbqqzZqqzXq6rVrKrXq6rZq6rbq6rbq6rfrrDbrK7asLHQ
        rKzKq6ynj4//7+7/8/H/+PX/+PUAAP/y8f/29f/7/OnExryQkc6cntKdoNafotOfn9Gfn9Cgn9Cgn9Gf
        n9Gfn9OgntOfn9KdoMyanMydn8Kam8GfoKaKiv/y8f/7+f/59v/59gAA//Dv//f2//v87cbIuImLyZSX
        y5SX1Juex5GRxZGRxZGRw5GRxZGRxZGRx5GQx5GQzpWYyZKVyJaYwZWWwJudpYmJ//Py//37//n2//n2
        AAD/+Pf/9PP/8fD10dHWqqv6yMr4wcT6wcT/zc3/zc3/zc3/zc3/zsz/zsz/zcz/zcz/xMj+xcj/ys30
        xcfowcO8nZ7/9vX/9vT/9/T+9/QAAP/7+f/39v/y8PPR0cmfoO28vuqztu+4u+q0tOi0tOa0tOW1tOa1
        s+a1s+i1s+q0s/O4vPG2uvK7vua3ud22uLWWl//08//39f/39P739AAA//j0//v4//b07c7Nq4OEw5SW
        voqKy5eXxZGRw5GRwpKQwJOQwpKQwpKQwpKQxZKQy46SyIuPyI+Sv46QvpaYpYWG//Dw//37//j1//j1
        AAD/+fX/+PX/8e/x0tG7k5TZqqzPm5vXo6PYpKTWpKTVpaPTpqPTpqPVpaPVpaPYpaPeo6fdoKTepajU
        oqTQpaiwjo//8vL/+vn/+Pb/+fYAAP/7+f/y8f/z8+/Nzsien+y7vfS9wPO8v/O9vfG9ve6+ve6+ve6+
        vO++vO++vPG+vPC3uvW8v/O8v++9v+e6vbmUlv/19f/x8P/29P739AAA//Lw//Py//z89NLTwJaX26qs
        4aqt46yv4aur36ur3Kyr3Kyr3Kyq3ayq3ayq36yq6LO26LO24ayv26qs16qtsYyO//j4//v6//j2/vn2
        AAD/9/X/9vT/+vrry8ywiInDlJbDjpHCjZDFkZHDkZHCkpHAkpHAk5DCkpDDkpDDkpC/jY/Bj5G/jY+/
        kJLBlpmjgYL/8vL/+ff/+fb9+vYAAP/49v7x7//08+3Oz8Wfn+i5u+y6vOm3ueWzs+S0s+K0s+K0s+K1
        suS0suW0suW0sui2uOu6vOm4uuW5ut62uLKSk//19f/z8f739Pn49AAA//r3//Px//f28NTUyqam78PE
        9cTG9MLE+8nJ+srJ+MrJ+MrJ+srI+srI+8rI+8rI9cTG98bI9MPF7sLD5r7AuJiZ//n5//f1/Pf09/j0
        AAD/+fb/+Pb//fzpzc2uiorClpfCkZPBj5G9i4u8jIu8jIu8jIu8jIq9jIq9jIq9jIrAjpDBkJK/jpC+
        kpPAmJqigoP/8/P/+vj++fb7+vYAAP718v/08v/7+uzNzrWPj82eoM+dn9KdoNWhodOhodOhodOhodOi
        oNWioNehoNehoNSfotOho86cnsydn8ugo6qFh//z8//49//59v369gAA//78//b0//f38dHSyqKj8cDC
        98LF+cLF+MLC9sLC9sLC9sLC9sPB+MLB+sLB+sLB87y/9sHE9sHE9MLE7b7Bv5eZ//f4//Tz//b0/vf0
        AAD/8/H//fz/8fH82tu8kpPZp6niq67kq67mra7krq7krq7krq7krq3mrq3mrq3mrq3ep6rfqKvfqKvo
        s7bVo6e1io3/+vv/9/f/9vT/9vQAAP/08v/19P/w8PHMzreLjMmXmcmSlcuSlcaNjsSOjsSOjsKOjsSO
        jcSOjcaOjcaOjceQk8qVmMeQk8uWmcSSlrOGif/v8f/y8v/49//59wAA//78//Tz//r6372+r4OEuoiK
        s3x/s3x/vIaGuoaGuIaGuIaGuIeFuIeFuoeFuoeFuoWIvoyOsn2Arnx+tIKGsIOG/+bo//v8//b1//f1
        AAD98O776ej/+/vKqqutg4TDlJbCkJLHlZfDkZHCkpHAkpG+kpG+k5C+k5DAk5DCkpC4iYvGl5nBkpTB
        kpTClZivh4nvzc7/8fH/9fT/9vQAAP///P/6+P/9/LGVlY5qap91dp1ucJxtb5hvbZZvbZVvbZNwbZNw
        bJNwbJVwbJVwbJRubpp0dJdvcJlxcpx0dpNucNGys//19P/49v/49gAA/fj1/vXy//DuqpKSkHFwmXV1
        lGxtkWlql3RxlXRxknVxkHVxkHZwkHZwknVwknVwlHZ1j3Bvjmxsjmxsj21uk3R1xq6u//Lx//f1//j1
        AAD5+PT/+/j//vz34+L/5+X/8fD/8vL/+Pj/7en/7en/7un/7un/7+j/7+j/7+j/7+j/7ev/6uj/9PP/
        9fT/7e3/6en/7Ov//vz99vP79vMAAPn69vr38/718v/49//9+//39v/t7P/x8P/38//48//48//58//6
        8v/68v/58v/58v/7+f/w7v/29P/x7//t7f/9/P/19P7y8P/59v369gAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>